WMA_m = WMA(weightSMA, weightEMA, x[,k], m_day)
} else if (low){
k = 3
#Calculate WMA (or GMA)
WMA_n = WMA(weightSMA, weightEMA, x[,k], n_day)
WMA_m = WMA(weightSMA, weightEMA, x[,k], m_day)
} else if (close){
k = 4
#Calculate WMA (or GMA)
WMA_n = WMA(weightSMA, weightEMA, x[,k], n_day)
WMA_m = WMA(weightSMA, weightEMA, x[,k], m_day)
} else if (adjusted){
k = 6
#Calculate WMA (or GMA)
WMA_n = WMA(weightSMA, weightEMA, x[,k], n_day)
WMA_m = WMA(weightSMA, weightEMA, x[,k], m_day)
} else {
print ("check your true/false entrys")
}
# plot the data and Moving Averages
plotMAs(x[,k], n_day, WMA_n, m_day, WMA_m)
#set up fillable matrix
mAvgsAllData <- matrix(cbind(x[,k], WMA_n, WMA_m), ncol=3)
return(mAvgsAllData)
}
####################################################
# Function: Give Prediction Data/MAs (gPredDataMA) #
# Input: mAvgsAll(x) -- we'll use the data and GMA #
# Return: "sell" "buy" "wait"                      #
####################################################
# we might want to change the argument for this function
# since X is already defined as the original OHLC data matrix,
# using lowercase x could be confusing.
#
# It wants data of the form [price,WMA_n,WMA_m]; maybe use something like:
# gPredDataMA = function(WMAdata){...}
# the same can be said of gPredDataMABuy, gPredDataMASell, gPredCross, and fProfit
# -Shane
#
# Shane, this sounds like a good idea. This will also help us later on when we
# are looking back at the code and trying to figure out what we did and why
# we did. Let's plan on changing this the next time we meet. Otherwise, I may
# get to it over Thanksgiving break.
# -Russ
gPredDataMA <- function(x){
len <- length(x[,1])
# case of short term, check if data above or below GMA
if(x[(len-1),1]>x[(len-1),2]){
if(x[len,1]>x[(len-1),2]){
print("Prediction from Short: wait")
} else {
print("Prediction from Short: sell")
}
} else {
if(x[len,1]<x[(len-1),2]){
print("Prediction from short: wait")
} else {
print("Prediction from short: buy")
}
}
# case of long term, check if data above or below GMA
if(x[(len-1),1]>x[(len-1),3]){
if(x[len,1]>x[(len-1),3]){
print("Prediction from long: wait")
} else {
print("Prediction from long: sell")
}
} else {
if(x[len,1]<x[(len-1),3]){
print("Prediction from long: wait")
} else {
print("Prediction from long: buy")
}
}
}
####################################################
# Function: Give Prediction Data/MAs (gPredDataMABuy) #
# Input: mAvgsAll(x) -- we'll use the data and GMA #
# Return: true value for buy only                  #
####################################################
gPredDataMABuy <- function(x){
len <- length(x[,1])
# case of short term, check if data above or below GMA
if(x[(len-1),1]>x[(len-1),2]){
if(x[len,1]>x[(len-1),2]){
return (FALSE)
} else {
return (FALSE)
}
} else {
if(x[len,1]<x[(len-1),2]){
return (FALSE)
} else {
return (TRUE)
}
}
}
####################################################
# Function: Give Prediction Data/MAs (gPredDataMASell) #
# Input: mAvgsAll(x) -- we'll use the data and GMA #
# Return: true value for sell only                  #
####################################################
gPredDataMASell <- function(x){
len <- length(x[,1])
# case of short term, check if data above or below GMA
if(x[(len-1),1]>x[(len-1),2]){
if(x[len,1]>x[(len-1),2]){
return (FALSE)
} else {
return (TRUE)
}
} else {
if(x[len,1]<x[(len-1),2]){
return (FALSE)
} else {
return (FALSE)
}
}
}
#############################################################
# Function: Give Prediction Crossover of MAs (gPredCrossMA) #
# Input: mAvgsAll(x) -- we'll use the two WMA cols          #
# Return: "sell" "buy" "wait"                               #
# Special: Will only return a single prediction since it    #
#    compares two MAs there is no way to do more than one   #
#    prediction without providing another input matrix with #
#    different MAs                                          #
#############################################################
gPredCrossMA <- function(x){
len <- length(x[,1])
# check if short or long peroid is greater
if(x[(len-1),2]>x[(len-1),3]){ #condition for short period being greater
if(x[len,2]>x[len,3]){ #nothing has changed, so wait
print("Prediction from cross: wait")
} else { #shortMA has dipped below longMA, so sell
print("Prediction from cross: sell")
}
} else{
if(x[len,2]<x[len,3]){ #nothing has changed, so wait
print("Prediction from cross: wait")
} else { #shortMA has gone above longMA, so buy
print("Prediction from cross: buy")
}
}
}
######################################################
# Function: Give Prediction MA/MA (gPredCrossMASell) #
# Input: mAvgsAll(x) -- we'll use the data and WMA   #
# Return: true value for sell only                   #
######################################################
gPredCrossMASell <- function(x){
len <- length(x[,1])
if(x[(len-1),2]>x[(len-1),3]){ #condition for short period being greater
if(x[len,2]>x[len,3]){ #nothing has changed, so wait
return(FALSE)
} else { #shortMA has dipped below longMA, so sell
return(TRUE)
}
} else{ #if shortMA starts below longMA we would never sell
return(FALSE)
}
}
#####################################################
# Function: Give Prediction MA/MA (gPredCrossMABuy) #
# Input: mAvgsAll(x) -- we'll use the data and WMA  #
# Return: true value for buy only                   #
#####################################################
gPredCrossMABuy <- function(x){
len <- length(x[,1])
if(x[(len-1),2]<x[(len-1),3]){ #condition for short period being greater
if(x[len,2]<x[len,3]){ #nothing has changed, so wait
return(FALSE)
} else { #shortMA has gone above longMA, so buy
return(TRUE)
}
} else{ # if shortMA starts below longMA we would never buy
return(FALSE)
}
}
####################################################
# Function: linear regression (lreg)               #
# Input: a matrix (Will likely use mAvgsAll)       #
# Return: slope and intercept                      #
# Special: slope seems more significant            #
####################################################
lreg <- function(x, timeConsidered){ #timeConsidered is the nth most recent data points
# set up fillable matrix
dataMatrix <- matrix(c(c(seq(timeConsidered)),c(seq(timeConsidered))), ncol=2)
for(i in 1:timeConsidered){
jumpValue <- (length(x)-timeConsidered + i)
dataMatrix[i,1] <- jumpValue
dataMatrix[i,2] <- x[jumpValue]
}
# calculate correlation
r <- cor(dataMatrix[,1], dataMatrix[,2])
# calculate standard deviation
sx <- sd(dataMatrix[,1])
sy <- sd(dataMatrix[,2])
# calculate means
xbar <- mean(dataMatrix[,1])
ybar <- mean(dataMatrix[,2])
# calculate slope of least squares regression lin
slope <- r*(sy/sx)
# calcuclate y-intercept of least squares regression line
return(slope)
}
####################################################
# Function: find profit of Data|MA (fProfitDataMA) #
# Input: mAvgsAll(x) -- we'll use the data and WMA #
#         will need "buy" "sell" points            #
# Return: ROI and Profit Summary                   #
####################################################
fProfitDataMA <- function(x, timeShort, timeLong){
buyAmt      = 0 # amount a unit of stock was purchased at
sellAmt     = 0 # amount a unit of stock sold for
profit      = 0 # money made or lost
totalProfit = 0 # tracks total profit
totalSpent  = 0 # tracks toatl buy amounts
stockOn     = 0 # 0 if no stock, 1 if stock purchased INDICATIVE VARIABLE
for (i in (timeShort+1):length(x[,1])){
xShort <- x[-(i+1):-length(x[,1]),]
#print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
#print(i)
#print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
#print('buy Amt')
#print(buyAmt)
#print('sell Amt')
#print(sellAmt)
#print('total profit')
#print(totalProfit)
#print('total spent')
#print(totalSpent)
#print('stock on')
#print(stockOn)
#print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
if(gPredDataMABuy(xShort) && stockOn==0){
#print("BUY!!!") # for debugging
buyAmt  = x[i,1]
# keep track of total amount spent, only changes with a buy
totalSpent  = buyAmt + totalSpent
stockOn = 1 # 1 indicates stock
} else if(gPredDataMASell(xShort) && stockOn==1){
#print("SELL!!!") # for debugging
sellAmt = x[i,1]
profit  = sellAmt-buyAmt
# keep track of total profit, only changes with a sell
totalProfit = profit + totalProfit
stockOn = 0 # restart stock count
} else if(i == length(x[,1])){
# if we are still waiting to sell when period ends, we sell for current amount
if (x[i,2]<buyAmt){ ###SPECIAL CONDITION FOR SHORT###
totalProfit = totalProfit + (x[i,1]-buyAmt)
} else{
# nothing is needed as amount has been sold
}
message("NOTE: final balance sold to calculate ROI")
} else{
#print("DO NOTHING!!!") # for debugging
# nothing else needs to happen because we are waiting for a sell prediction
}
}
message(timeShort,"-day TOTALS:")
message("Total Spent: ", totalSpent)
message("Total Profit: ", totalProfit)
message("Relative Profit (ROI): ", round(((totalProfit/totalSpent)*100),2), " %")
# clear variables and start again, we may want to consider changing to a single MA function style
# insted of the two MA function style we started with
# -Russ
buyAmt      = 0 # amount a unit of stock was purchased at
sellAmt     = 0 # amount a unit of stock sold for
profit      = 0 # money made or lost
totalProfit = 0 # tracks total profit
totalSpent  = 0 # tracks toatl buy amounts
stockOn     = 0 # 0 if no stock, 1 if stock purchased INDICATIVE VARIABLE
for (i in (timeLong+1):length(x[,1])){
xLong <- x[-(i+1):-length(x[,1]),]
if(gPredDataMABuy(xLong) && stockOn==0){
buyAmt  = x[i,1]
# keep track of total amount spent, only changes with a buy
totalSpent  = buyAmt + totalSpent
stockOn = 1 # 1 indicates stock
} else if(gPredDataMASell(xLong) && stockOn==1){
sellAmt = x[i,1]
profit  = sellAmt-buyAmt
# keep track of total profit, only changes with a sell
totalProfit = profit + totalProfit
stockOn = 0 # restart stock count
} else if(i == length(x[,1])){
# if we are still waiting to sell when period ends, we sell for current amount
if (x[i,3]<buyAmt){ ###SPECIAL CONDITION FOR LONG###
totalProfit = totalProfit + (x[i,1]-buyAmt)
} else{
# nothing is needed as amount has been sold
}
message("NOTE: final balance sold to calculate ROI")
} else{
# nothing else needs to happen because we are waiting for a sell prediction
}
}
message(timeLong,"-day TOTALS:")
message("Total Spent: ", totalSpent)
message("Total Profit: ", totalProfit)
message("Relative Profit (ROI): ", round(((totalProfit/totalSpent)*100),2), " %")
# for testing the end of matrix
#print(x[-1:-(length(x[,1])-1),])
#print(length(x[,1]))
}
####################################################
# Function: find profit of MA|MA (fProfitCrossMA)  #
# Input: mAvgsAll(x) -- we'll use the data and WMA #
#         will need "buy" "sell" points            #
# Return: ROI and Profit Summary                   #
####################################################
fProfitCrossMA <- function(x, timeShort, timeLong){
buyAmt      = 0 # amount a unit of stock was purchased at
sellAmt     = 0 # amount a unit of stock sold for
profit      = 0 # money made or lost
totalProfit = 0 # tracks total profit
totalSpent  = 0 # tracks toatl buy amounts
stockOn     = 0 # 0 if no stock, 1 if stock purchased INDICATIVE VARIABLE
for (i in (timeLong+1):length(x[,1])){# must use time long since it does not exist when time short does!
xShort <- x[-(i+1):-length(x[,1]),]
if(gPredCrossMABuy(xShort) && stockOn == 0){
buyAmt  = x[i,1]
# keep track of total amount spent, only changes with a buy
sellAmt = buyAmt #we set the sellAmt=buyAmt so we do not buy again until after sell
totalSpent  = buyAmt + totalSpent
stockOn = 1
} else if(gPredCrossMASell(xShort) && stockOn == 1){
sellAmt = x[i,1]
profit  = sellAmt-buyAmt
# keep track of total profit, only changes with a sell
totalProfit = profit + totalProfit
stockOn = 0
} else if(i == length(x[,1])){
# if we are still waiting to sell when period ends, we sell for current amount
if (x[i,2]<buyAmt){ ###SPECIAL CONDITION FOR SHORT###
totalProfit = totalProfit + (x[i,1]-buyAmt)
} else{
# nothing is needed as amount has been sold
}
message("NOTE: final balance sold to calculate ROI")
} else{
# nothing else needs to happen because we are waiting for a sell prediction
}
}
message("MA SUMMARY & TOTALS:")
message("Total Spent: ", totalSpent)
message("Total Profit: ", totalProfit)
message("Relative Profit (ROI): ", round(((totalProfit/totalSpent)*100),2), " %")
}
fProfitDataMA(mAvgsAll(X,10,25,.1,.9),10,25)
fProfitDataMA(mAvgsAll(X,30,55,.1,.9),30,55)
fProfitDataMA(mAvgsAll(X,30,55,.9,.1),30,55)
fProfitDataMA(mAvgsAll(X,30,55,0,0),30,55)
fProfitDataMA(mAvgsAll(X,40,60,.2,.8),40,60)
fProfitDataMA(mAvgsAll(X,80,120,.2,.8),80,120)
fProfitCrossMA(mAvgsAll(X,80,120,.1,.9),80,120)
fProfitCrossMA(mAvgsAll(X,45,75,.1,.9),45,75)
fProfitCrossMA(mAvgsAll(X,45,75,.9,.1),45,75)
fProfitCrossMA(mAvgsAll(X,45,75,1,0),45,75)
fProfitCrossMA(mAvgsAll(X,45,75,0,1),45,75)
fProfitCrossMA(mAvgsAll(X,20,30,.1,.9),20,30)
fProfitCrossMA(mAvgsAll(X,10,30,.1,.9),20,30)
fProfitCrossMA(mAvgsAll(X,10,15,.1,.9),20,30)
fProfitCrossMA(mAvgsAll(X,15,20,.1,.9),20,30)
####################################################
fProfitDataMA <- function(x, timeShort, timeLong){
buyAmt      = 0 # amount a unit of stock was purchased at
sellAmt     = 0 # amount a unit of stock sold for
profit      = 0 # money made or lost
totalProfit = 0 # tracks total profit
totalSpent  = 0 # tracks toatl buy amounts
stockOn     = 0 # 0 if no stock, 1 if stock purchased INDICATIVE VARIABLE
for (i in (timeShort+1):length(x[,1])){
xShort <- x[-(i+1):-length(x[,1]),]
#print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
#print(i)
#print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
#print('buy Amt')
#print(buyAmt)
#print('sell Amt')
#print(sellAmt)
#print('total profit')
#print(totalProfit)
#print('total spent')
#print(totalSpent)
#print('stock on')
#print(stockOn)
#print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
if(gPredDataMABuy(xShort) && stockOn==0){
#print("BUY!!!") # for debugging
buyAmt  = x[i,1]
# keep track of total amount spent, only changes with a buy
totalSpent  = buyAmt + totalSpent
stockOn = 1 # 1 indicates stock
} else if(gPredDataMASell(xShort) && stockOn==1 && buyAmt<x[i,1]){
#print("SELL!!!") # for debugging
sellAmt = x[i,1]
profit  = sellAmt-buyAmt
# keep track of total profit, only changes with a sell
totalProfit = profit + totalProfit
stockOn = 0 # restart stock count
} else if(i == length(x[,1])){
# if we are still waiting to sell when period ends, we sell for current amount
if (x[i,2]<buyAmt){ ###SPECIAL CONDITION FOR SHORT###
totalProfit = totalProfit + (x[i,1]-buyAmt)
} else{
# nothing is needed as amount has been sold
}
message("NOTE: final balance sold to calculate ROI")
} else{
#print("DO NOTHING!!!") # for debugging
# nothing else needs to happen because we are waiting for a sell prediction
}
}
message(timeShort,"-day TOTALS:")
message("Total Spent: ", totalSpent)
message("Total Profit: ", totalProfit)
message("Relative Profit (ROI): ", round(((totalProfit/totalSpent)*100),2), " %")
# clear variables and start again, we may want to consider changing to a single MA function style
# insted of the two MA function style we started with
# -Russ
buyAmt      = 0 # amount a unit of stock was purchased at
sellAmt     = 0 # amount a unit of stock sold for
profit      = 0 # money made or lost
totalProfit = 0 # tracks total profit
totalSpent  = 0 # tracks toatl buy amounts
stockOn     = 0 # 0 if no stock, 1 if stock purchased INDICATIVE VARIABLE
for (i in (timeLong+1):length(x[,1])){
xLong <- x[-(i+1):-length(x[,1]),]
if(gPredDataMABuy(xLong) && stockOn==0){
buyAmt  = x[i,1]
# keep track of total amount spent, only changes with a buy
totalSpent  = buyAmt + totalSpent
stockOn = 1 # 1 indicates stock
} else if(gPredDataMASell(xLong) && stockOn==1 && buyAmt<x[i,1]){
sellAmt = x[i,1]
profit  = sellAmt-buyAmt
# keep track of total profit, only changes with a sell
totalProfit = profit + totalProfit
stockOn = 0 # restart stock count
} else if(i == length(x[,1])){
# if we are still waiting to sell when period ends, we sell for current amount
if (x[i,3]<buyAmt){ ###SPECIAL CONDITION FOR LONG###
totalProfit = totalProfit + (x[i,1]-buyAmt)
} else{
# nothing is needed as amount has been sold
}
message("NOTE: final balance sold to calculate ROI")
} else{
# nothing else needs to happen because we are waiting for a sell prediction
}
}
message(timeLong,"-day TOTALS:")
message("Total Spent: ", totalSpent)
message("Total Profit: ", totalProfit)
message("Relative Profit (ROI): ", round(((totalProfit/totalSpent)*100),2), " %")
# for testing the end of matrix
#print(x[-1:-(length(x[,1])-1),])
#print(length(x[,1]))
}
####################################################
# Function: find profit of MA|MA (fProfitCrossMA)  #
# Input: mAvgsAll(x) -- we'll use the data and WMA #
#         will need "buy" "sell" points            #
# Return: ROI and Profit Summary                   #
####################################################
fProfitCrossMA <- function(x, timeShort, timeLong){
buyAmt      = 0 # amount a unit of stock was purchased at
sellAmt     = 0 # amount a unit of stock sold for
profit      = 0 # money made or lost
totalProfit = 0 # tracks total profit
totalSpent  = 0 # tracks toatl buy amounts
stockOn     = 0 # 0 if no stock, 1 if stock purchased INDICATIVE VARIABLE
for (i in (timeLong+1):length(x[,1])){# must use time long since it does not exist when time short does!
xShort <- x[-(i+1):-length(x[,1]),]
if(gPredCrossMABuy(xShort) && stockOn == 0){
buyAmt  = x[i,1]
# keep track of total amount spent, only changes with a buy
sellAmt = buyAmt #we set the sellAmt=buyAmt so we do not buy again until after sell
totalSpent  = buyAmt + totalSpent
stockOn = 1
} else if(gPredCrossMASell(xShort) && stockOn == 1){
sellAmt = x[i,1]
profit  = sellAmt-buyAmt
# keep track of total profit, only changes with a sell
totalProfit = profit + totalProfit
stockOn = 0
} else if(i == length(x[,1])){
# if we are still waiting to sell when period ends, we sell for current amount
if (x[i,2]<buyAmt){ ###SPECIAL CONDITION FOR SHORT###
totalProfit = totalProfit + (x[i,1]-buyAmt)
} else{
# nothing is needed as amount has been sold
}
message("NOTE: final balance sold to calculate ROI")
} else{
# nothing else needs to happen because we are waiting for a sell prediction
}
}
message("MA SUMMARY & TOTALS:")
message("Total Spent: ", totalSpent)
message("Total Profit: ", totalProfit)
message("Relative Profit (ROI): ", round(((totalProfit/totalSpent)*100),2), " %")
}
fProfitCrossMA(mAvgsAll(X,15,20,.1,.9),20,30)
fProfitDataMA(mAvgsAll(X,80,120,.2,.8),80,120)
fProfitDataMA(mAvgsAll(X,45,100,.2,.8),45,100)
fProfitDataMA(mAvgsAll(X,45,100,.1,.9),45,100)
fProfitDataMA(mAvgsAll(X,45,80,.1,.9),45,80)
fProfitCrossMA(mAvgsAll(X,20,40,.1,.9),20,40)
